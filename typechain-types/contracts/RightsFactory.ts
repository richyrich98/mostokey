/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RightsFactory {
  export type TokenInfoStruct = {
    tokenAddress: AddressLike;
    creator: AddressLike;
    pricePerToken: BigNumberish;
    totalSupply: BigNumberish;
    soldTokens: BigNumberish;
    videoUrl: string;
    active: boolean;
  };

  export type TokenInfoStructOutput = [
    tokenAddress: string,
    creator: string,
    pricePerToken: bigint,
    totalSupply: bigint,
    soldTokens: bigint,
    videoUrl: string,
    active: boolean
  ] & {
    tokenAddress: string;
    creator: string;
    pricePerToken: bigint;
    totalSupply: bigint;
    soldTokens: bigint;
    videoUrl: string;
    active: boolean;
  };
}

export interface RightsFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allTokens"
      | "createToken"
      | "creatorEarnings"
      | "getAllTokens"
      | "getCreatorEarnings"
      | "getTokenInfo"
      | "getTokensByCreator"
      | "purchaseTokens"
      | "tokens"
      | "withdrawEarnings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreatorWithdraw"
      | "TokenCreated"
      | "TokensPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensByCreator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensByCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;
}

export namespace CreatorWithdrawEvent {
  export type InputTuple = [creator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [creator: string, amount: bigint];
  export interface OutputObject {
    creator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    creator: AddressLike,
    name: string,
    symbol: string,
    totalSupply: BigNumberish,
    pricePerToken: BigNumberish,
    videoUrl: string
  ];
  export type OutputTuple = [
    tokenAddress: string,
    creator: string,
    name: string,
    symbol: string,
    totalSupply: bigint,
    pricePerToken: bigint,
    videoUrl: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    creator: string;
    name: string;
    symbol: string;
    totalSupply: bigint;
    pricePerToken: bigint;
    videoUrl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    tokenAddress: AddressLike,
    amount: BigNumberish,
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    tokenAddress: string,
    amount: bigint,
    totalCost: bigint
  ];
  export interface OutputObject {
    buyer: string;
    tokenAddress: string;
    amount: bigint;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RightsFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RightsFactory;
  waitForDeployment(): Promise<this>;

  interface: RightsFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createToken: TypedContractMethod<
    [
      name: string,
      symbol: string,
      totalSupply: BigNumberish,
      pricePerToken: BigNumberish,
      videoUrl: string,
      metadataURI: string
    ],
    [string],
    "nonpayable"
  >;

  creatorEarnings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getAllTokens: TypedContractMethod<[], [string[]], "view">;

  getCreatorEarnings: TypedContractMethod<
    [creator: AddressLike],
    [bigint],
    "view"
  >;

  getTokenInfo: TypedContractMethod<
    [tokenAddress: AddressLike],
    [RightsFactory.TokenInfoStructOutput],
    "view"
  >;

  getTokensByCreator: TypedContractMethod<
    [creator: AddressLike],
    [string[]],
    "view"
  >;

  purchaseTokens: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  tokens: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, string, boolean] & {
        tokenAddress: string;
        creator: string;
        pricePerToken: bigint;
        totalSupply: bigint;
        soldTokens: bigint;
        videoUrl: string;
        active: boolean;
      }
    ],
    "view"
  >;

  withdrawEarnings: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      totalSupply: BigNumberish,
      pricePerToken: BigNumberish,
      videoUrl: string,
      metadataURI: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorEarnings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCreatorEarnings"
  ): TypedContractMethod<[creator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [RightsFactory.TokenInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensByCreator"
  ): TypedContractMethod<[creator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "purchaseTokens"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, string, boolean] & {
        tokenAddress: string;
        creator: string;
        pricePerToken: bigint;
        totalSupply: bigint;
        soldTokens: bigint;
        videoUrl: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CreatorWithdraw"
  ): TypedContractEvent<
    CreatorWithdrawEvent.InputTuple,
    CreatorWithdrawEvent.OutputTuple,
    CreatorWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchased"
  ): TypedContractEvent<
    TokensPurchasedEvent.InputTuple,
    TokensPurchasedEvent.OutputTuple,
    TokensPurchasedEvent.OutputObject
  >;

  filters: {
    "CreatorWithdraw(address,uint256)": TypedContractEvent<
      CreatorWithdrawEvent.InputTuple,
      CreatorWithdrawEvent.OutputTuple,
      CreatorWithdrawEvent.OutputObject
    >;
    CreatorWithdraw: TypedContractEvent<
      CreatorWithdrawEvent.InputTuple,
      CreatorWithdrawEvent.OutputTuple,
      CreatorWithdrawEvent.OutputObject
    >;

    "TokenCreated(address,address,string,string,uint256,uint256,string)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "TokensPurchased(address,address,uint256,uint256)": TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
    TokensPurchased: TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
  };
}
